%tensorflow_version 2.x 

from __future__ import absolute_import, division, print_function, unicode_literals
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
from IPython.display import clear_output
from six.moves import urllib
import tensorflow.compat.v2.feature_column as fc
import tensorflow as tf

train = pd.read_csv('https://raw.githubusercontent.com/nickjackson862/machine-learning/main/trainData40_10.csv')
test = pd.read_csv('https://raw.githubusercontent.com/nickjackson862/machine-learning/main/testData40_10.csv')

CATEGORICAL_COLUMNS = ['GroupSkill1', 'GroupSkill2', 'GroupSkill3', 'GroupSkill4', 'ProjectSkill1', 'ProjectSkill2', 'ProjectSkill3', 'ProjectSkill4']

NUMERIC_COLUMNS = ['GroupNumber', 'GroupUnit', 'GroupPreference1', 'GroupPreference2', 'GroupPreference3', 'ProjectNumber', 'ProjectUnit', 'ProjectPreference1', 'ProjectPreference2', 'ProjectPreference3']

train_y = train.pop('Allocated')
test_y = test.pop('Allocated')
train.head()

def input_fn(features, labels, training=True, batch_size=256):   
    dataset = tf.data.Dataset.from_tensor_slices((dict(features), labels))    
    if training:
        dataset = dataset.shuffle(1000).repeat()    
    return dataset.batch(batch_size)

my_feature_columns = []
for feature_name in CATEGORICAL_COLUMNS:
  train[feature_name]=train[feature_name].astype('category')
  train[feature_name]=train[feature_name].cat.codes
  test[feature_name]=test[feature_name].astype('category')
  test[feature_name]=test[feature_name].cat.codes

for feature_name in NUMERIC_COLUMNS:
  my_feature_columns.append(tf.feature_column.numeric_column(feature_name, dtype=tf.float32))

classifier = tf.estimator.DNNClassifier(
    feature_columns=my_feature_columns,
    hidden_units=[50, 20],
    n_classes=2)

classifier.train(
    input_fn=lambda: input_fn(train, train_y, training=True),
    steps=10000)

clear_output()

eval_result = classifier.evaluate(
    input_fn=lambda: input_fn(test, test_y, training=False))

clear_output()
print('\nTest set accuracy: {accuracy:0.3f}\n'.format(**eval_result))

